def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.sandfriends"
        minSdkVersion 21 //flutter.minSdkVersion
        targetSdkVersion 33 //flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    

    signingConfigs {
        releaseProd {
            keyAlias keystoreProperties['keyAliasProd']
            keyPassword keystoreProperties['keyPasswordProd']
            storeFile keystoreProperties['storeFileProd'] ? file(keystoreProperties['storeFileProd']) : null
            storePassword keystoreProperties['storePasswordProd']
        }
        releaseDev {
            keyAlias keystoreProperties['keyAliasDev']
            keyPassword keystoreProperties['keyPasswordDev']
            storeFile keystoreProperties['storeFileDev'] ? file(keystoreProperties['storeFileDev']) : null
            storePassword keystoreProperties['storePasswordDev']
        }
        releaseDemo {
            keyAlias keystoreProperties['keyAliasDemo']
            keyPassword keystoreProperties['keyPasswordDemo']
            storeFile keystoreProperties['storeFileDemo'] ? file(keystoreProperties['storeFileDemo']) : null
            storePassword keystoreProperties['storePasswordDemo']
        }
        debug {
            keyAlias keystoreProperties['keyAliasDev']
            keyPassword keystoreProperties['keyPasswordDev']
            storeFile keystoreProperties['storeFileDev'] ? file(keystoreProperties['storeFileDev']) : null
            storePassword keystoreProperties['storePasswordDev']
        }
    }
    

    lintOptions {
        disable 'InvalidPackage'
        disable "Instantiatable"
        checkReleaseBuilds false
        abortOnError false
    }

    flavorDimensions "default"
    productFlavors {
        prod {
            dimension "default"
            resValue "string", "app_name", "Sandfriends"
            applicationIdSuffix "app.prod"
            manifestPlaceholders.subDomainDeeplink = "app"
            signingConfig signingConfigs.releaseProd
        }
        dev {
            dimension "default"
            resValue "string", "app_name", "Sandfriends dev"
            applicationIdSuffix "app.dev"
            manifestPlaceholders.subDomainDeeplink = "devapp"
            signingConfig signingConfigs.releaseDev
        }
        demo {
            dimension "default"
            resValue "string", "app_name", "Sandfriends demo"
            applicationIdSuffix "app.demo"
            manifestPlaceholders.subDomainDeeplink = "demoapp"
            signingConfig signingConfigs.releaseDemo
        }
        aulasProd {
            dimension "default"
            resValue "string", "app_name", "Sandfriends Aulas"
            applicationIdSuffix "aulas.prod"
            manifestPlaceholders.subDomainDeeplink = "aulas"
            signingConfig signingConfigs.releaseProd
        }
        aulasDev {
            dimension "default"
            resValue "string", "app_name", "SandAulas dev"
            applicationIdSuffix "aulas.dev"
            manifestPlaceholders.subDomainDeeplink = "devaulas"
            signingConfig signingConfigs.releaseDev
        }
        aulasDemo {
            dimension "default"
            resValue "string", "app_name", "Sandfriends Aulas demo"
            applicationIdSuffix "aulas.demo"
            manifestPlaceholders.subDomainDeeplink = "demoaulas"
            signingConfig signingConfigs.releaseDemo
        }
        quadrasProd {
            dimension "default"
            resValue "string", "app_name", "Sandfriends Quadras"
            applicationIdSuffix "quadras.prod"
            manifestPlaceholders.subDomainDeeplink = "quadras"
            signingConfig signingConfigs.releaseProd
        }
        quadrasDev {
            dimension "default"
            resValue "string", "app_name", "Sandfriends Quadras dev"
            applicationIdSuffix "quadras.dev"
            manifestPlaceholders.subDomainDeeplink = "devquadras"
            signingConfig signingConfigs.releaseDev
        }
        quadrasDemo {
            dimension "default"
            resValue "string", "app_name", "Sandfriends Quadras demo"
            applicationIdSuffix "quadras.demo"
            manifestPlaceholders.subDomainDeeplink = "demoquadras"
            signingConfig signingConfigs.releaseDemo
        }
        webPageDev {
            dimension "default"
            resValue "string", "app_name", "Sandfriends Quadras dev"
            applicationIdSuffix "quadras.dev"
            manifestPlaceholders.subDomainDeeplink = "devquadras"
            signingConfig signingConfigs.releaseDev
        }
       
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:32.1.0')

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'
}
